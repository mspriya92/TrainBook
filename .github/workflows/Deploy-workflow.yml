name: Deploy-test Workflow

on:
  workflow_dispatch:  # Triggered manually using the "Run workflow" button

jobs:
  copy_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checkout the repository code
      - name: Copy Job Dependencies (if they exist)
        run: |
          mkdir -p job_dependencies  # Create the directory if it doesn't exist
          cp .github/job_dependencies.json job_dependencies/ || true  # Copy the file, ignoring errors if it's missing
      - name: Listing the directory
        run: ls -R  # List directory contents
      - name: Show Job Dependencies (if present)
        run: cat job_dependencies/job_dependencies.json || true  # Display the file contents, ignoring errors if it's missing
      - name: Set matrix data (using job outputs)
        id: set-matrix
        run: |
          env_value=$(jq -r .env job_dependencies/job_dependencies.json || true)  # Capture env value, handle potential missing file
          echo "::set-output name=env::$env_value"  # Set the 'env' output variable for downstream jobs
      - name: Check env value (using job outputs)
       
        run: |
          echo ${{ steps.set-matrix.outputs.env }}
          deploy_value= ${{ steps.set-matrix.outputs.env }}
          echo $deploy_value

  print:
    runs-on: ubuntu-latest
    needs: copy_files
    strategy:
      matrix:
        devops: ${{fromJson(needs.copy_files.outputs.deploy_value)}}
    steps:
      - name: Check devops value from print
        run: echo $devops
